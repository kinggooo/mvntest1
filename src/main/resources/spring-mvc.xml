<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
    http://www.springframework.org/schema/aop
     http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
     http://www.springframework.org/schema/task
     http://www.springframework.org/schema/task/spring-task-4.1.xsd">
    <!-- 注解驱动 -->
    <mvc:annotation-driven/>
    <task:annotation-driven/>
    <task:scheduler id="schedulerPool" pool-size="20"/>
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
    <context:component-scan base-package="com.em.controller"/>
    <!-- <context:component-scan base-package="com.em.annotation" /> -->

    <mvc:annotation-driven>
        <mvc:message-converters register-defaults="true">
            <!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
            <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                <constructor-arg value="UTF-8"/>
            </bean>
            <!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
            <bean
                    class="com.em.util.MappingJackson2HttpMessageConverter">
                <property name="prettyPrint" value="true"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->
    <bean id="mappingJacksonHttpMessageConverter"
          class="com.em.util.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <mvc:interceptors>
        <bean class="com.em.framework.mvc.EastMoneyInterceptor">
            <!-- <property name="debug" value="true"/>  -->
        </bean>
        <!--
    <mvc:interceptor>
        <mvc:mapping path="/**"/>

    </mvc:interceptor> -->
    </mvc:interceptors>

    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->
    <bean
            class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <ref bean="mappingJacksonHttpMessageConverter"/> <!-- JSON转换器 -->
            </list>
        </property>
    </bean>

    <!-- 采用SpringMVC自带的JSON转换工具，支持@ResponseBody注解-->
    <bean


            class=" org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">

        <!--  自定义返回值拦截 -->
        <property name="responseBodyAdvice">
            <list>
                <bean class="com.em.framework.mvc.LoanResponseBodyAdvice"></bean>
            </list>
        </property>

        <!-- 自定义返回值校验
        <property name="customReturnValueHandlers">
            <list>
                <bean class="com.em.entity.admin.ResponseDecorator"></bean>
            </list>
        </property>
-->
        <!-- 注入全局的propertiesEditor
        <property name="webBindingInitializer">
            <bean class="com.em.framework.mvc.BaseWebBindingInital">
                <property name="timeFormatter" value="yyyy-MM-dd HH:mm:ss"></property>
            </bean>
        </property>
        <property name="contentNegotiationManager" ref="contentNegotiationManager"></property>
-->

    </bean>

    <!-- 启动对@AspectJ注解的支持 -->
    <aop:aspectj-autoproxy/>

    <!--通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>


    <!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
    <bean
            class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
        <property name="prefix" value="/WEB-INF/views/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


    <bean id="viewResolver"
          class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass"
                  value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>
    <!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver    -->
    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    </bean>

    <bean id="druid-stat-interceptor"
          class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
    </bean>

    <bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut"
          scope="prototype">
        <property name="patterns">
            <list>
                <value>com.em.service.*</value>
                <value>com.em.dao.*</value>
            </list>
        </property>
    </bean>


    <aop:config proxy-target-class="true">
        <aop:advisor advice-ref="druid-stat-interceptor"
                     pointcut-ref="druid-stat-pointcut"/>
    </aop:config>

    <bean id="exceptionResolver" class="com.em.exception.ExceptionHandler"/>
</beans>